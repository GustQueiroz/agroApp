REACT_APP_API_URL=https://proagroapp-qa.azurewebsites.net

import React, { useState } from "react";
import axios from "axios";
import InputMask from "react-input-mask";
import "bootstrap/dist/css/bootstrap.min.css";
import "./styles/FormStyles.css";
import CurrencyInput from "react-currency-input-field";

const FormProducer = () => {
  const [formData, setFormData] = useState({
    fullName: "",
    email: "",
    cpf: "",
    civilStatus: "",
    matrimonialRegimes: "",
    partnerCpf: "",
    phoneNumber: "",
    timeExperience: "",
    invoicingPerYear: "",
    profile: "",
    agriculturalTechnicalAssistance: "",
    maintenanceFamilyPerYear: "",
    supplierDebts: "",
    normalFundingFromOtherFinancialInstitutions: "",
    extendFundingFromOtherFinancialInstitutions: "",
    investmentInOtherFinancialInstitutions: "",
    street: "",
    number: "",
    district: "",
    city: "",
    state: "",
    complement: "",
    isAcceptedTerm: false,
    isActive: true,
  });

  const handleInputChange = (e) => {
    const { id, value, type, checked } = e.target;
    setFormData((prevData) => ({
      ...prevData,
      [id]: type === "checkbox" ? checked : value,
    }));
  };

  const handleOnlyNumber = (e) => {
    const numericValue = e.target.value.replace(/\D/g, "");
    e.target.value = numericValue;
  };

  const handleSubmit = async (e) => {
    e.preventDefault();

    try {
      const response = await axios.post(
        `${process.env.REACT_APP_API_URL}/api/producers`,
        formData
      );
      if (response.status === 200) {
        console.log("Producer created successfully:", response.data);
      } else {
        console.error("Error creating producer:", response.data);
      }
    } catch (error) {
      console.error("Error creating producer:", error);
    }
  };

  const handleCivilStateChange = (e) => {
    const selectedCivilState = e.target.value;
    setFormData((prevData) => ({
      ...prevData,
      civilStatus: selectedCivilState,
      matrimonialRegimes:
        selectedCivilState === "uniao-estavel" ? "comunhao-parcial" : "",
      partnerCpf:
        selectedCivilState === "casado" ||
        selectedCivilState === "uniao-estavel"
          ? ""
          : prevData.partnerCpf,
    }));
  };

  return (
    <div>
      <form className="row g-3" onSubmit={handleSubmit}>
        <div className="col-lg-8 col-md-10 col-sm-12">
          <label htmlFor="fullName" className="form-label">
            Nome Produtor Rural
          </label>
          <input
            type="text"
            className="form-control"
            id="fullName"
            value={formData.fullName}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-3 col-sm-12">
          <label htmlFor="cpf" className="form-label">
            CPF do Produtor Rural
          </label>
          <InputMask
            mask="999.999.999-99"
            type="text"
            className="form-control"
            id="cpf"
            value={formData.cpf}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-3 col-sm-12">
          <label htmlFor="civilStatus" className="form-label">
            Estado Civil
          </label>
          <select
            className="form-select input"
            id="civilStatus"
            value={formData.civilStatus}
            onChange={handleCivilStateChange}
            required
          >
            <option value="">Estado Civil</option>
            <option value="casado">Casado(a)</option>
            <option value="divorciado">Divorciado(a)</option>
            <option value="separado">Separado(a)</option>
            <option value="solteiro">Solteiro(a)</option>
            <option value="uniao-estavel">União Estável</option>
            <option value="viuvo">Viúvo(a)</option>
          </select>
        </div>
        <div className="col-lg-5 col-sm-12">
          <label htmlFor="matrimonialRegimes" className="form-label">
            Regime casamento
          </label>
          <select
            className="form-select input"
            id="matrimonialRegimes"
            value={formData.matrimonialRegimes}
            onChange={handleInputChange}
            disabled={
              formData.civilStatus === "solteiro" ||
              formData.civilStatus === "divorciado" ||
              formData.civilStatus === ""
            }
            required={
              formData.civilStatus === "casado" ||
              formData.civilStatus === "uniao-estavel"
            }
          >
            <option value=""></option>
            {formData.civilStatus !== "solteiro" &&
              formData.civilStatus !== "divorciado" &&
              formData.civilStatus !== "" && (
                <>
                  <option value="comunhao-parcial">
                    Comunhão Parcial de Bens
                  </option>
                  <option value="comunhao-universal">
                    Comunhão Universal de Bens
                  </option>
                  <option value="separacao-obrigatoria">
                    Separação Obrigatória de Bens
                  </option>
                  <option value="separacao-total">
                    Separação Total de Bens
                  </option>
                </>
              )}
          </select>
        </div>
        <div className="col-lg-3 col-sm-12">
          <label htmlFor="partnerCpf" className="form-label">
            CPF Cônjuge
          </label>
          <InputMask
            mask="999.999.999-99"
            type="text"
            className="form-control"
            id="partnerCpf"
            value={formData.partnerCpf}
            onChange={handleInputChange}
            disabled={
              formData.civilStatus !== "casado" &&
              formData.civilStatus !== "uniao-estavel"
            }
            required={
              formData.civilStatus === "casado" ||
              formData.civilStatus === "uniao-estavel"
            }
          />
        </div>
        <div className="col-lg-3 col-sm-12">
          <label htmlFor="phoneNumber" className="form-label">
            Telefone Celular
          </label>
          <InputMask
            mask="(99) 99999-9999"
            type="text"
            className="form-control"
            id="phoneNumber"
            value={formData.phoneNumber}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-9 col-sm-12">
          <label htmlFor="email" className="form-label">
            Email
          </label>
          <input
            type="email"
            className="form-control"
            id="email"
            value={formData.email}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-2">
          <label htmlFor="timeExperience" className="form-label">
            Experiência (anos)
          </label>
          <input
            type="number"
            className="form-control"
            id="timeExperience"
            value={formData.timeExperience}
            onChange={handleInputChange}
            maxLength={2}
            required
          />
        </div>
        <div className="col-lg-7 col-sm-12">
          <label htmlFor="invoicingPerYear" className="form-label">
            Faturamento Anual (todas receitas rurais ou não)
          </label>
          <CurrencyInput
            id="invoicingPerYear"
            name="invoicingPerYear"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({
                ...prevData,
                invoicingPerYear: value,
              }))
            }
            required
          />
        </div>
        <div className="col-lg-3 col-sm-12">
          <label htmlFor="profile" className="form-label">
            Perfil do Produtor
          </label>
          <select
            className="form-select input"
            id="profile"
            value={formData.profile}
            onChange={handleInputChange}
            required
          >
            <option value="">Perfil do Produtor</option>
            <option value="demais">Demais</option>
            <option value="pronaf">PRONAF</option>
            <option value="pronamp">PRONAMP</option>
          </select>
        </div>
        <div className="col-lg-3 col-sm-12">
          <label
            htmlFor="agriculturalTechnicalAssistance"
            className="form-label"
          >
            Assistência Técnica
          </label>
          <select
            className="form-select input"
            id="agriculturalTechnicalAssistance"
            value={formData.agriculturalTechnicalAssistance}
            onChange={handleInputChange}
            required
          >
            <option value="">Assistência Técnica</option>
            <option value="nao">Não Possui</option>
            <option value="sim">Sim Possui</option>
          </select>
        </div>
        <div className="col-lg-8 col-sm-12">
          <label htmlFor="maintenanceFamilyPerYear" className="form-label">
            Despesa anual com a família
          </label>
          <CurrencyInput
            id="maintenanceFamilyPerYear"
            name="maintenanceFamilyPerYear"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({
                ...prevData,
                maintenanceFamilyPerYear: value,
              }))
            }
            required
          />
        </div>
        <div className="col-lg-8 col-sm-12">
          <label htmlFor="supplierDebts" className="form-label">
            Dívidas com Fornecedores
          </label>
          <CurrencyInput
            id="supplierDebts"
            name="supplierDebts"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({ ...prevData, supplierDebts: value }))
            }
            required
          />
        </div>
        <div className="col-lg-8 col-sm-12">
          <label
            htmlFor="normalFundingFromOtherFinancialInstitutions"
            className="form-label"
          >
            Duplicatas normais junto a outras instituições financeiras
          </label>
          <CurrencyInput
            id="normalFundingFromOtherFinancialInstitutions"
            name="normalFundingFromOtherFinancialInstitutions"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({
                ...prevData,
                normalFundingFromOtherFinancialInstitutions: value,
              }))
            }
            required
          />
        </div>
        <div className="col-lg-8 col-sm-12">
          <label
            htmlFor="extendFundingFromOtherFinancialInstitutions"
            className="form-label"
          >
            Duplicatas prorrogadas junto a outras instituições financeiras
          </label>
          <CurrencyInput
            id="extendFundingFromOtherFinancialInstitutions"
            name="extendFundingFromOtherFinancialInstitutions"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({
                ...prevData,
                extendFundingFromOtherFinancialInstitutions: value,
              }))
            }
            required
          />
        </div>
        <div className="col-lg-8 col-sm-12">
          <label
            htmlFor="investmentInOtherFinancialInstitutions"
            className="form-label"
          >
            Investimentos junto a outras instituições financeiras
          </label>
          <CurrencyInput
            id="investmentInOtherFinancialInstitutions"
            name="investmentInOtherFinancialInstitutions"
            className="form-control"
            placeholder="R$0,00"
            prefix="R$"
            decimalSeparator=","
            groupSeparator="."
            allowNegativeValue={false}
            decimalsLimit={2}
            onValueChange={(value) =>
              setFormData((prevData) => ({
                ...prevData,
                investmentInOtherFinancialInstitutions: value,
              }))
            }
            required
          />
        </div>
        <div className="col-lg-6 col-sm-12">
          <label htmlFor="street" className="form-label">
            Rua
          </label>
          <input
            type="text"
            className="form-control"
            id="street"
            value={formData.street}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-2 col-sm-12">
          <label htmlFor="number" className="form-label">
            Número
          </label>
          <input
            type="text"
            className="form-control"
            id="number"
            value={formData.number}
            onChange={handleInputChange}
            onInput={handleOnlyNumber}
            required
          />
        </div>
        <div className="col-lg-6 col-sm-12">
          <label htmlFor="district" className="form-label">
            Bairro
          </label>
          <input
            type="text"
            className="form-control"
            id="district"
            value={formData.district}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-5 col-sm-12">
          <label htmlFor="city" className="form-label">
            Cidade
          </label>
          <input
            type="text"
            className="form-control"
            id="city"
            value={formData.city}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-4 col-sm-12">
          <label htmlFor="state" className="form-label">
            Estado
          </label>
          <input
            type="text"
            className="form-control"
            id="state"
            value={formData.state}
            onChange={handleInputChange}
            required
          />
        </div>
        <div className="col-lg-5 col-sm-12">
          <label htmlFor="complement" className="form-label">
            Complemento
          </label>
          <input
            type="text"
            className="form-control"
            id="complement"
            value={formData.complement}
            onChange={handleInputChange}
          />
        </div>
        <div className="col-lg-5 col-sm-12"></div>
        <div className="col-12 check">
          <label htmlFor="isAcceptedTerm" className="form-label">
            <input
              className="form-check-input"
              type="checkbox"
              id="isAcceptedTerm"
              checked={formData.isAcceptedTerm}
              onChange={handleInputChange}
              required
            />
            Autorizo nos termos da Resolução CMN nº 3.658 de 17.12.2008, à CAIXA
            a consultar as informações consolidadas, relativas a minha pessoa ou
            à empresa e seus sócios, se for o caso, constantes no Sistema de
            Informações de Créditos (SCR) do BACEN. <br />
            Autorizo, ainda, a CAIXA a fornecer informações sobre as operações
            de crédito com ela realizadas, no sentido de compor o cadastro do
            citado sistema. Os presentes dados são verdadeiros e visam facilitar
            os processos de negociação e transações comerciais, pela antecipação
            de informações à meu respeito. <br />
            Autorizo o arquivamento dos meus dados pessoais e de idoneidade na
            SERASA - Centralização de Serviços dos Bancos S/A, que poderá deles
            se utilizar, respeitadas as disposições legais em vigor. Para os
            devidos fins de direito, declaro(amos) responsável(eis) pela
            veracidade das informações prestadas neste formulário e autorizamos
            sua confirmação. <br />
            Declaro que: <br />
            • as informações por mim prestadas sobre renda/faturamento e
            patrimônio são lícitas; <br />
            • tenho ciência da Lei nº 9.613/98, que dispõe sobre os crimes de
            lavagem ou ocultação de bens, direitos e valores com as alterações
            introduzidas, e dos arts. 297, 298 e 299 do Código Penal; <br />•
            ciente de que a falsidade dos dados declarados configura crime
            previsto na legislação brasileira, passível de responsabilização
            civil, criminal e administrativa, podendo implicar na imediata
            revogação das avaliações de risco de crédito, das operações
            avaliadas e não contratadas e do vencimento antecipado das operações
            de crédito vigente vinculadas a tais dados.
          </label>
        </div>
        <div className="col-12 d-flex justify-content-center">
          <button type="submit" className="btn btn-success">
            Enviar
          </button>
        </div>
      </form>
    </div>
  );
};

export default FormProducer;
